input {
  beats  {
    port => 5044
    codec => plain { charset=>"UTF-8" }
  }
}
filter {
  grok {
    match => { "message" => "conn=%{NUMBER:conn}" }
  }
  grok {
    match => { "message" => "ACCEPT from IP=%{IPV4:client_ip}" }
  }
  if ("BIND" in [message] or "RESULT" in [message] or "ACCEPT" in [message]) and "SEARCH" not in [message] {
    grok {
      match => {
        "message" => [
          "dn=\"uid=%{DATA:uid},%{GREEDYDATA:dn}\"",
          "err=%{INT:error_code}",
          "%{SYSLOGHOST:host}"
        ]
      }
    }
    kv {
      source => "dn"
      field_split => ","
      value_split => "="
      target => "dn_fields"
    }
    ruby {
      code => "
        if event.get('client_ip')
          ip_parts = event.get('client_ip').split('.')
          taller = 'T' + ip_parts[2]
          case ip_parts[3]
             when /^\d\d$/
              taller = 'ICO'
              pc = 'DPTO' + ip_parts[3][-1]
             else
              pc = case ip_parts[3]
              when '1'
                'SERV1'
              when /^1\d\d$/
                'PC' + ip_parts[3][1..-1]
              else
                nil
              end
           end
          equipo = pc + '-' + taller if pc
          event.set('PC', pc)
          event.set('TALLER', taller)
          event.set('EQUIPO', equipo)
        end
      "
    }
    aggregate {
      task_id => "%{conn}"
      code => "
        exceptions = ['cn=nss,dc=inf','uid=pedropegu,ou=asir,ou=people,dc=inf']
        case event.get('dn')
                when *exceptions
                        nil
                else
                        map['bind_result'] ||= '';
                        map['bind_result'] += event.get('message') + ' ';
                        event.to_hash.each { |k,v|
                          map[k] = v unless k == 'message'
                }
        end
      "
      push_previous_map_as_event => true
      timeout => 5
    }
  }
  if [log][file][path] == "/var/log/auth.log" {
    if "pam_sss" in [message] {
      grok {
        match => { "message" => "user=%{WORD:uid}" }
      }
    }
    ruby {
      code => "
        eq = event.get('[host][hostname]')
        if eq
          pc, taller = eq.split('-')
          event.set('PC', pc.upcase)
          event.set('TALLER', taller.upcase)
          event.set('EQUIPO', eq.upcase)
        end
      "
    }
  }
}
output {
   opensearch {
     hosts => ["https://opensearch-node1:9200","https://opensearch-node2:9200"]
     index => "system-logs-%{+YYYY.MM.dd}"
     user => "admin"
     password => "admin"
     ssl => true
     ssl_certificate_verification => false
   }
}